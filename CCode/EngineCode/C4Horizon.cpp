 

#include "C4Horizon.h"
#include "C4Graphics.h"
#include "C4Configuration.h"


using namespace C4;


namespace
{
	const TextureHeader horizonTextureHeader =
	{
		kTextureCube,
		kTextureForceHighQuality,
		kTextureSemanticData,
		kTextureSemanticData,
		kTextureRGBA8,
		16, 16, 1,
		{kTextureClamp, kTextureClamp, kTextureClamp},
		1
	};

	alignas(32) const unsigned_int8 horizonTextureImage[0x1800] =
	{
		0x85, 0xF9, 0x80, 0x80, 0x85, 0xF9, 0x80, 0x80, 0x85, 0xF9, 0x80, 0x80, 0x85, 0xF9, 0x80, 0x80, 0x85, 0xF9, 0x80, 0x80, 0x85, 0xF9, 0x80, 0x80, 0x85, 0xF9, 0x80, 0x80, 0x85, 0xF9, 0x80, 0x80,
		0x85, 0xF9, 0x80, 0x80, 0x85, 0xF9, 0x80, 0x80, 0x85, 0xF9, 0x80, 0x80, 0x85, 0xF9, 0x80, 0x80, 0x85, 0xF9, 0x80, 0x80, 0x85, 0xF9, 0x80, 0x80, 0x85, 0xF9, 0x80, 0x80, 0x85, 0xF9, 0x80, 0x80,
		0x90, 0xEE, 0x80, 0x80, 0x90, 0xEE, 0x80, 0x80, 0x90, 0xEE, 0x80, 0x80, 0x90, 0xEE, 0x80, 0x80, 0x90, 0xEE, 0x80, 0x80, 0x90, 0xEE, 0x80, 0x80, 0x90, 0xEE, 0x80, 0x80, 0x90, 0xEE, 0x80, 0x80,
		0x90, 0xEE, 0x80, 0x80, 0x90, 0xEE, 0x80, 0x80, 0x90, 0xEE, 0x80, 0x80, 0x90, 0xEE, 0x80, 0x80, 0x90, 0xEE, 0x80, 0x80, 0x90, 0xEE, 0x80, 0x80, 0x90, 0xEE, 0x80, 0x80, 0x90, 0xEE, 0x80, 0x80,
		0x9D, 0xE1, 0x80, 0x80, 0x9D, 0xE1, 0x80, 0x80, 0x9D, 0xE1, 0x80, 0x80, 0x9D, 0xE1, 0x80, 0x80, 0x9D, 0xE1, 0x80, 0x80, 0x9D, 0xE1, 0x80, 0x80, 0x9D, 0xE1, 0x80, 0x80, 0x9D, 0xE1, 0x80, 0x80,
		0x9D, 0xE1, 0x80, 0x80, 0x9D, 0xE1, 0x80, 0x80, 0x9D, 0xE1, 0x80, 0x80, 0x9D, 0xE1, 0x80, 0x80, 0x9D, 0xE1, 0x80, 0x80, 0x9D, 0xE1, 0x80, 0x80, 0x9D, 0xE1, 0x80, 0x80, 0x9D, 0xE1, 0x80, 0x80,
		0xAC, 0xD2, 0x80, 0x80, 0xAC, 0xD2, 0x80, 0x80, 0xAC, 0xD2, 0x80, 0x80, 0xAC, 0xD2, 0x80, 0x80, 0xAC, 0xD2, 0x80, 0x80, 0xAC, 0xD2, 0x80, 0x80, 0xAC, 0xD2, 0x80, 0x80, 0xAC, 0xD2, 0x80, 0x80,
		0xAC, 0xD2, 0x80, 0x80, 0xAC, 0xD2, 0x80, 0x80, 0xAC, 0xD2, 0x80, 0x80, 0xAC, 0xD2, 0x80, 0x80, 0xAC, 0xD2, 0x80, 0x80, 0xAC, 0xD2, 0x80, 0x80, 0xAC, 0xD2, 0x80, 0x80, 0xAC, 0xD2, 0x80, 0x80,
		0xBC, 0xC2, 0x80, 0x80, 0xBC, 0xC2, 0x80, 0x80, 0xBC, 0xC2, 0x80, 0x80, 0xBC, 0xC2, 0x80, 0x80, 0xBC, 0xC2, 0x80, 0x80, 0xBC, 0xC2, 0x80, 0x80, 0xBC, 0xC2, 0x80, 0x80, 0xBC, 0xC2, 0x80, 0x80,
		0xBC, 0xC2, 0x80, 0x80, 0xBC, 0xC2, 0x80, 0x80, 0xBC, 0xC2, 0x80, 0x80, 0xBC, 0xC2, 0x80, 0x80, 0xBC, 0xC2, 0x80, 0x80, 0xBC, 0xC2, 0x80, 0x80, 0xBC, 0xC2, 0x80, 0x80, 0xBC, 0xC2, 0x80, 0x80,
		0xCE, 0xB0, 0x80, 0x80, 0xCE, 0xB0, 0x80, 0x80, 0xCE, 0xB0, 0x80, 0x80, 0xCE, 0xB0, 0x80, 0x80, 0xCE, 0xB0, 0x80, 0x80, 0xCE, 0xB0, 0x80, 0x80, 0xCE, 0xB0, 0x80, 0x80, 0xCE, 0xB0, 0x80, 0x80,
		0xCE, 0xB0, 0x80, 0x80, 0xCE, 0xB0, 0x80, 0x80, 0xCE, 0xB0, 0x80, 0x80, 0xCE, 0xB0, 0x80, 0x80, 0xCE, 0xB0, 0x80, 0x80, 0xCE, 0xB0, 0x80, 0x80, 0xCE, 0xB0, 0x80, 0x80, 0xCE, 0xB0, 0x80, 0x80,
		0xE1, 0x9D, 0x80, 0x80, 0xE1, 0x9D, 0x80, 0x80, 0xE1, 0x9D, 0x80, 0x80, 0xE1, 0x9D, 0x80, 0x80, 0xE1, 0x9D, 0x80, 0x80, 0xE1, 0x9D, 0x80, 0x80, 0xE1, 0x9D, 0x80, 0x80, 0xE1, 0x9D, 0x80, 0x80,
		0xE1, 0x9D, 0x80, 0x80, 0xE1, 0x9D, 0x80, 0x80, 0xE1, 0x9D, 0x80, 0x80, 0xE1, 0x9D, 0x80, 0x80, 0xE1, 0x9D, 0x80, 0x80, 0xE1, 0x9D, 0x80, 0x80, 0xE1, 0x9D, 0x80, 0x80, 0xE1, 0x9D, 0x80, 0x80,
		0xF4, 0x8A, 0x80, 0x80, 0xF4, 0x8A, 0x80, 0x80, 0xF4, 0x8A, 0x80, 0x80, 0xF4, 0x8A, 0x80, 0x80, 0xF4, 0x8A, 0x80, 0x80, 0xF4, 0x8A, 0x80, 0x80, 0xF4, 0x8A, 0x80, 0x80, 0xF4, 0x8A, 0x80, 0x80,
		0xF4, 0x8A, 0x80, 0x80, 0xF4, 0x8A, 0x80, 0x80, 0xF4, 0x8A, 0x80, 0x80, 0xF4, 0x8A, 0x80, 0x80, 0xF4, 0x8A, 0x80, 0x80, 0xF4, 0x8A, 0x80, 0x80, 0xF4, 0x8A, 0x80, 0x80, 0xF4, 0x8A, 0x80, 0x80,
		0xF4, 0x80, 0x80, 0x76, 0xF4, 0x80, 0x80, 0x76, 0xF4, 0x80, 0x80, 0x76, 0xF4, 0x80, 0x80, 0x76, 0xF4, 0x80, 0x80, 0x76, 0xF4, 0x80, 0x80, 0x76, 0xF4, 0x80, 0x80, 0x76, 0xF4, 0x80, 0x80, 0x76,
		0xF4, 0x80, 0x80, 0x76, 0xF4, 0x80, 0x80, 0x76, 0xF4, 0x80, 0x80, 0x76, 0xF4, 0x80, 0x80, 0x76, 0xF4, 0x80, 0x80, 0x76, 0xF4, 0x80, 0x80, 0x76, 0xF4, 0x80, 0x80, 0x76, 0xF4, 0x80, 0x80, 0x76,
		0xE1, 0x80, 0x80, 0x63, 0xE1, 0x80, 0x80, 0x63, 0xE1, 0x80, 0x80, 0x63, 0xE1, 0x80, 0x80, 0x63, 0xE1, 0x80, 0x80, 0x63, 0xE1, 0x80, 0x80, 0x63, 0xE1, 0x80, 0x80, 0x63, 0xE1, 0x80, 0x80, 0x63,
		0xE1, 0x80, 0x80, 0x63, 0xE1, 0x80, 0x80, 0x63, 0xE1, 0x80, 0x80, 0x63, 0xE1, 0x80, 0x80, 0x63, 0xE1, 0x80, 0x80, 0x63, 0xE1, 0x80, 0x80, 0x63, 0xE1, 0x80, 0x80, 0x63, 0xE1, 0x80, 0x80, 0x63,
		0xCE, 0x80, 0x80, 0x50, 0xCE, 0x80, 0x80, 0x50, 0xCE, 0x80, 0x80, 0x50, 0xCE, 0x80, 0x80, 0x50, 0xCE, 0x80, 0x80, 0x50, 0xCE, 0x80, 0x80, 0x50, 0xCE, 0x80, 0x80, 0x50, 0xCE, 0x80, 0x80, 0x50,
		0xCE, 0x80, 0x80, 0x50, 0xCE, 0x80, 0x80, 0x50, 0xCE, 0x80, 0x80, 0x50, 0xCE, 0x80, 0x80, 0x50, 0xCE, 0x80, 0x80, 0x50, 0xCE, 0x80, 0x80, 0x50, 0xCE, 0x80, 0x80, 0x50, 0xCE, 0x80, 0x80, 0x50,
		0xBC, 0x80, 0x80, 0x3E, 0xBC, 0x80, 0x80, 0x3E, 0xBC, 0x80, 0x80, 0x3E, 0xBC, 0x80, 0x80, 0x3E, 0xBC, 0x80, 0x80, 0x3E, 0xBC, 0x80, 0x80, 0x3E, 0xBC, 0x80, 0x80, 0x3E, 0xBC, 0x80, 0x80, 0x3E,
		0xBC, 0x80, 0x80, 0x3E, 0xBC, 0x80, 0x80, 0x3E, 0xBC, 0x80, 0x80, 0x3E, 0xBC, 0x80, 0x80, 0x3E, 0xBC, 0x80, 0x80, 0x3E, 0xBC, 0x80, 0x80, 0x3E, 0xBC, 0x80, 0x80, 0x3E, 0xBC, 0x80, 0x80, 0x3E,
		0xAC, 0x80, 0x80, 0x2E, 0xAC, 0x80, 0x80, 0x2E, 0xAC, 0x80, 0x80, 0x2E, 0xAC, 0x80, 0x80, 0x2E, 0xAC, 0x80, 0x80, 0x2E, 0xAC, 0x80, 0x80, 0x2E, 0xAC, 0x80, 0x80, 0x2E, 0xAC, 0x80, 0x80, 0x2E,
		0xAC, 0x80, 0x80, 0x2E, 0xAC, 0x80, 0x80, 0x2E, 0xAC, 0x80, 0x80, 0x2E, 0xAC, 0x80, 0x80, 0x2E, 0xAC, 0x80, 0x80, 0x2E, 0xAC, 0x80, 0x80, 0x2E, 0xAC, 0x80, 0x80, 0x2E, 0xAC, 0x80, 0x80, 0x2E,
		0x9D, 0x80, 0x80, 0x1F, 0x9D, 0x80, 0x80, 0x1F, 0x9D, 0x80, 0x80, 0x1F, 0x9D, 0x80, 0x80, 0x1F, 0x9D, 0x80, 0x80, 0x1F, 0x9D, 0x80, 0x80, 0x1F, 0x9D, 0x80, 0x80, 0x1F, 0x9D, 0x80, 0x80, 0x1F,
		0x9D, 0x80, 0x80, 0x1F, 0x9D, 0x80, 0x80, 0x1F, 0x9D, 0x80, 0x80, 0x1F, 0x9D, 0x80, 0x80, 0x1F, 0x9D, 0x80, 0x80, 0x1F, 0x9D, 0x80, 0x80, 0x1F, 0x9D, 0x80, 0x80, 0x1F, 0x9D, 0x80, 0x80, 0x1F,
		0x90, 0x80, 0x80, 0x12, 0x90, 0x80, 0x80, 0x12, 0x90, 0x80, 0x80, 0x12, 0x90, 0x80, 0x80, 0x12, 0x90, 0x80, 0x80, 0x12, 0x90, 0x80, 0x80, 0x12, 0x90, 0x80, 0x80, 0x12, 0x90, 0x80, 0x80, 0x12,
		0x90, 0x80, 0x80, 0x12, 0x90, 0x80, 0x80, 0x12, 0x90, 0x80, 0x80, 0x12, 0x90, 0x80, 0x80, 0x12, 0x90, 0x80, 0x80, 0x12, 0x90, 0x80, 0x80, 0x12, 0x90, 0x80, 0x80, 0x12, 0x90, 0x80, 0x80, 0x12,
		0x85, 0x80, 0x80, 0x07, 0x85, 0x80, 0x80, 0x07, 0x85, 0x80, 0x80, 0x07, 0x85, 0x80, 0x80, 0x07, 0x85, 0x80, 0x80, 0x07, 0x85, 0x80, 0x80, 0x07, 0x85, 0x80, 0x80, 0x07, 0x85, 0x80, 0x80, 0x07,
		0x85, 0x80, 0x80, 0x07, 0x85, 0x80, 0x80, 0x07, 0x85, 0x80, 0x80, 0x07, 0x85, 0x80, 0x80, 0x07, 0x85, 0x80, 0x80, 0x07, 0x85, 0x80, 0x80, 0x07, 0x85, 0x80, 0x80, 0x07, 0x85, 0x80, 0x80, 0x07,
		0x7B, 0x80, 0x80, 0xF9, 0x7B, 0x80, 0x80, 0xF9, 0x7B, 0x80, 0x80, 0xF9, 0x7B, 0x80, 0x80, 0xF9, 0x7B, 0x80, 0x80, 0xF9, 0x7B, 0x80, 0x80, 0xF9, 0x7B, 0x80, 0x80, 0xF9, 0x7B, 0x80, 0x80, 0xF9,
		0x7B, 0x80, 0x80, 0xF9, 0x7B, 0x80, 0x80, 0xF9, 0x7B, 0x80, 0x80, 0xF9, 0x7B, 0x80, 0x80, 0xF9, 0x7B, 0x80, 0x80, 0xF9, 0x7B, 0x80, 0x80, 0xF9, 0x7B, 0x80, 0x80, 0xF9, 0x7B, 0x80, 0x80, 0xF9,
		0x70, 0x80, 0x80, 0xEE, 0x70, 0x80, 0x80, 0xEE, 0x70, 0x80, 0x80, 0xEE, 0x70, 0x80, 0x80, 0xEE, 0x70, 0x80, 0x80, 0xEE, 0x70, 0x80, 0x80, 0xEE, 0x70, 0x80, 0x80, 0xEE, 0x70, 0x80, 0x80, 0xEE,
		0x70, 0x80, 0x80, 0xEE, 0x70, 0x80, 0x80, 0xEE, 0x70, 0x80, 0x80, 0xEE, 0x70, 0x80, 0x80, 0xEE, 0x70, 0x80, 0x80, 0xEE, 0x70, 0x80, 0x80, 0xEE, 0x70, 0x80, 0x80, 0xEE, 0x70, 0x80, 0x80, 0xEE,
		0x63, 0x80, 0x80, 0xE1, 0x63, 0x80, 0x80, 0xE1, 0x63, 0x80, 0x80, 0xE1, 0x63, 0x80, 0x80, 0xE1, 0x63, 0x80, 0x80, 0xE1, 0x63, 0x80, 0x80, 0xE1, 0x63, 0x80, 0x80, 0xE1, 0x63, 0x80, 0x80, 0xE1,
		0x63, 0x80, 0x80, 0xE1, 0x63, 0x80, 0x80, 0xE1, 0x63, 0x80, 0x80, 0xE1, 0x63, 0x80, 0x80, 0xE1, 0x63, 0x80, 0x80, 0xE1, 0x63, 0x80, 0x80, 0xE1, 0x63, 0x80, 0x80, 0xE1, 0x63, 0x80, 0x80, 0xE1,
		0x54, 0x80, 0x80, 0xD2, 0x54, 0x80, 0x80, 0xD2, 0x54, 0x80, 0x80, 0xD2, 0x54, 0x80, 0x80, 0xD2, 0x54, 0x80, 0x80, 0xD2, 0x54, 0x80, 0x80, 0xD2, 0x54, 0x80, 0x80, 0xD2, 0x54, 0x80, 0x80, 0xD2,
		0x54, 0x80, 0x80, 0xD2, 0x54, 0x80, 0x80, 0xD2, 0x54, 0x80, 0x80, 0xD2, 0x54, 0x80, 0x80, 0xD2, 0x54, 0x80, 0x80, 0xD2, 0x54, 0x80, 0x80, 0xD2, 0x54, 0x80, 0x80, 0xD2, 0x54, 0x80, 0x80, 0xD2,
		0x44, 0x80, 0x80, 0xC2, 0x44, 0x80, 0x80, 0xC2, 0x44, 0x80, 0x80, 0xC2, 0x44, 0x80, 0x80, 0xC2, 0x44, 0x80, 0x80, 0xC2, 0x44, 0x80, 0x80, 0xC2, 0x44, 0x80, 0x80, 0xC2, 0x44, 0x80, 0x80, 0xC2,
		0x44, 0x80, 0x80, 0xC2, 0x44, 0x80, 0x80, 0xC2, 0x44, 0x80, 0x80, 0xC2, 0x44, 0x80, 0x80, 0xC2, 0x44, 0x80, 0x80, 0xC2, 0x44, 0x80, 0x80, 0xC2, 0x44, 0x80, 0x80, 0xC2, 0x44, 0x80, 0x80, 0xC2,
		0x32, 0x80, 0x80, 0xB0, 0x32, 0x80, 0x80, 0xB0, 0x32, 0x80, 0x80, 0xB0, 0x32, 0x80, 0x80, 0xB0, 0x32, 0x80, 0x80, 0xB0, 0x32, 0x80, 0x80, 0xB0, 0x32, 0x80, 0x80, 0xB0, 0x32, 0x80, 0x80, 0xB0,
		0x32, 0x80, 0x80, 0xB0, 0x32, 0x80, 0x80, 0xB0, 0x32, 0x80, 0x80, 0xB0, 0x32, 0x80, 0x80, 0xB0, 0x32, 0x80, 0x80, 0xB0, 0x32, 0x80, 0x80, 0xB0, 0x32, 0x80, 0x80, 0xB0, 0x32, 0x80, 0x80, 0xB0,
		0x1F, 0x80, 0x80, 0x9D, 0x1F, 0x80, 0x80, 0x9D, 0x1F, 0x80, 0x80, 0x9D, 0x1F, 0x80, 0x80, 0x9D, 0x1F, 0x80, 0x80, 0x9D, 0x1F, 0x80, 0x80, 0x9D, 0x1F, 0x80, 0x80, 0x9D, 0x1F, 0x80, 0x80, 0x9D,
		0x1F, 0x80, 0x80, 0x9D, 0x1F, 0x80, 0x80, 0x9D, 0x1F, 0x80, 0x80, 0x9D, 0x1F, 0x80, 0x80, 0x9D, 0x1F, 0x80, 0x80, 0x9D, 0x1F, 0x80, 0x80, 0x9D, 0x1F, 0x80, 0x80, 0x9D, 0x1F, 0x80, 0x80, 0x9D,
		0x0C, 0x80, 0x80, 0x8A, 0x0C, 0x80, 0x80, 0x8A, 0x0C, 0x80, 0x80, 0x8A, 0x0C, 0x80, 0x80, 0x8A, 0x0C, 0x80, 0x80, 0x8A, 0x0C, 0x80, 0x80, 0x8A, 0x0C, 0x80, 0x80, 0x8A, 0x0C, 0x80, 0x80, 0x8A,
		0x0C, 0x80, 0x80, 0x8A, 0x0C, 0x80, 0x80, 0x8A, 0x0C, 0x80, 0x80, 0x8A, 0x0C, 0x80, 0x80, 0x8A, 0x0C, 0x80, 0x80, 0x8A, 0x0C, 0x80, 0x80, 0x8A, 0x0C, 0x80, 0x80, 0x8A, 0x0C, 0x80, 0x80, 0x8A,
		0x0C, 0x76, 0x80, 0x80, 0x0C, 0x76, 0x80, 0x80, 0x0C, 0x76, 0x80, 0x80, 0x0C, 0x76, 0x80, 0x80, 0x0C, 0x76, 0x80, 0x80, 0x0C, 0x76, 0x80, 0x80, 0x0C, 0x76, 0x80, 0x80, 0x0C, 0x76, 0x80, 0x80,
		0x0C, 0x76, 0x80, 0x80, 0x0C, 0x76, 0x80, 0x80, 0x0C, 0x76, 0x80, 0x80, 0x0C, 0x76, 0x80, 0x80, 0x0C, 0x76, 0x80, 0x80, 0x0C, 0x76, 0x80, 0x80, 0x0C, 0x76, 0x80, 0x80, 0x0C, 0x76, 0x80, 0x80,
		0x1F, 0x63, 0x80, 0x80, 0x1F, 0x63, 0x80, 0x80, 0x1F, 0x63, 0x80, 0x80, 0x1F, 0x63, 0x80, 0x80, 0x1F, 0x63, 0x80, 0x80, 0x1F, 0x63, 0x80, 0x80, 0x1F, 0x63, 0x80, 0x80, 0x1F, 0x63, 0x80, 0x80,
		0x1F, 0x63, 0x80, 0x80, 0x1F, 0x63, 0x80, 0x80, 0x1F, 0x63, 0x80, 0x80, 0x1F, 0x63, 0x80, 0x80, 0x1F, 0x63, 0x80, 0x80, 0x1F, 0x63, 0x80, 0x80, 0x1F, 0x63, 0x80, 0x80, 0x1F, 0x63, 0x80, 0x80,
		0x32, 0x50, 0x80, 0x80, 0x32, 0x50, 0x80, 0x80, 0x32, 0x50, 0x80, 0x80, 0x32, 0x50, 0x80, 0x80, 0x32, 0x50, 0x80, 0x80, 0x32, 0x50, 0x80, 0x80, 0x32, 0x50, 0x80, 0x80, 0x32, 0x50, 0x80, 0x80,
		0x32, 0x50, 0x80, 0x80, 0x32, 0x50, 0x80, 0x80, 0x32, 0x50, 0x80, 0x80, 0x32, 0x50, 0x80, 0x80, 0x32, 0x50, 0x80, 0x80, 0x32, 0x50, 0x80, 0x80, 0x32, 0x50, 0x80, 0x80, 0x32, 0x50, 0x80, 0x80,
		0x44, 0x3E, 0x80, 0x80, 0x44, 0x3E, 0x80, 0x80, 0x44, 0x3E, 0x80, 0x80, 0x44, 0x3E, 0x80, 0x80, 0x44, 0x3E, 0x80, 0x80, 0x44, 0x3E, 0x80, 0x80, 0x44, 0x3E, 0x80, 0x80, 0x44, 0x3E, 0x80, 0x80,
		0x44, 0x3E, 0x80, 0x80, 0x44, 0x3E, 0x80, 0x80, 0x44, 0x3E, 0x80, 0x80, 0x44, 0x3E, 0x80, 0x80, 0x44, 0x3E, 0x80, 0x80, 0x44, 0x3E, 0x80, 0x80, 0x44, 0x3E, 0x80, 0x80, 0x44, 0x3E, 0x80, 0x80,
		0x54, 0x2E, 0x80, 0x80, 0x54, 0x2E, 0x80, 0x80, 0x54, 0x2E, 0x80, 0x80, 0x54, 0x2E, 0x80, 0x80, 0x54, 0x2E, 0x80, 0x80, 0x54, 0x2E, 0x80, 0x80, 0x54, 0x2E, 0x80, 0x80, 0x54, 0x2E, 0x80, 0x80,
		0x54, 0x2E, 0x80, 0x80, 0x54, 0x2E, 0x80, 0x80, 0x54, 0x2E, 0x80, 0x80, 0x54, 0x2E, 0x80, 0x80, 0x54, 0x2E, 0x80, 0x80, 0x54, 0x2E, 0x80, 0x80, 0x54, 0x2E, 0x80, 0x80, 0x54, 0x2E, 0x80, 0x80,
		0x63, 0x1F, 0x80, 0x80, 0x63, 0x1F, 0x80, 0x80, 0x63, 0x1F, 0x80, 0x80, 0x63, 0x1F, 0x80, 0x80, 0x63, 0x1F, 0x80, 0x80, 0x63, 0x1F, 0x80, 0x80, 0x63, 0x1F, 0x80, 0x80, 0x63, 0x1F, 0x80, 0x80,
		0x63, 0x1F, 0x80, 0x80, 0x63, 0x1F, 0x80, 0x80, 0x63, 0x1F, 0x80, 0x80, 0x63, 0x1F, 0x80, 0x80, 0x63, 0x1F, 0x80, 0x80, 0x63, 0x1F, 0x80, 0x80, 0x63, 0x1F, 0x80, 0x80, 0x63, 0x1F, 0x80, 0x80,
		0x70, 0x12, 0x80, 0x80, 0x70, 0x12, 0x80, 0x80, 0x70, 0x12, 0x80, 0x80, 0x70, 0x12, 0x80, 0x80, 0x70, 0x12, 0x80, 0x80, 0x70, 0x12, 0x80, 0x80, 0x70, 0x12, 0x80, 0x80, 0x70, 0x12, 0x80, 0x80,
		0x70, 0x12, 0x80, 0x80, 0x70, 0x12, 0x80, 0x80, 0x70, 0x12, 0x80, 0x80, 0x70, 0x12, 0x80, 0x80, 0x70, 0x12, 0x80, 0x80, 0x70, 0x12, 0x80, 0x80, 0x70, 0x12, 0x80, 0x80, 0x70, 0x12, 0x80, 0x80,
		0x7B, 0x07, 0x80, 0x80, 0x7B, 0x07, 0x80, 0x80, 0x7B, 0x07, 0x80, 0x80, 0x7B, 0x07, 0x80, 0x80, 0x7B, 0x07, 0x80, 0x80, 0x7B, 0x07, 0x80, 0x80, 0x7B, 0x07, 0x80, 0x80, 0x7B, 0x07, 0x80, 0x80,
		0x7B, 0x07, 0x80, 0x80, 0x7B, 0x07, 0x80, 0x80, 0x7B, 0x07, 0x80, 0x80, 0x7B, 0x07, 0x80, 0x80, 0x7B, 0x07, 0x80, 0x80, 0x7B, 0x07, 0x80, 0x80, 0x7B, 0x07, 0x80, 0x80, 0x7B, 0x07, 0x80, 0x80,
		0x80, 0x80, 0x85, 0xF9, 0x80, 0x80, 0x90, 0xEE, 0x80, 0x80, 0x9D, 0xE1, 0x80, 0x80, 0xAC, 0xD2, 0x80, 0x80, 0xBC, 0xC2, 0x80, 0x80, 0xCE, 0xB0, 0x80, 0x80, 0xE1, 0x9D, 0x80, 0x80, 0xF4, 0x8A,
		0x80, 0x8A, 0xF4, 0x80, 0x80, 0x9D, 0xE1, 0x80, 0x80, 0xB0, 0xCE, 0x80, 0x80, 0xC2, 0xBC, 0x80, 0x80, 0xD2, 0xAC, 0x80, 0x80, 0xE1, 0x9D, 0x80, 0x80, 0xEE, 0x90, 0x80, 0x80, 0xF9, 0x85, 0x80,
		0x80, 0x80, 0x85, 0xF9, 0x80, 0x80, 0x90, 0xEE, 0x80, 0x80, 0x9D, 0xE1, 0x80, 0x80, 0xAC, 0xD2, 0x80, 0x80, 0xBC, 0xC2, 0x80, 0x80, 0xCE, 0xB0, 0x80, 0x80, 0xE1, 0x9D, 0x80, 0x80, 0xF4, 0x8A,
		0x80, 0x8A, 0xF4, 0x80, 0x80, 0x9D, 0xE1, 0x80, 0x80, 0xB0, 0xCE, 0x80, 0x80, 0xC2, 0xBC, 0x80, 0x80, 0xD2, 0xAC, 0x80, 0x80, 0xE1, 0x9D, 0x80, 0x80, 0xEE, 0x90, 0x80, 0x80, 0xF9, 0x85, 0x80,
		0x80, 0x80, 0x85, 0xF9, 0x80, 0x80, 0x90, 0xEE, 0x80, 0x80, 0x9D, 0xE1, 0x80, 0x80, 0xAC, 0xD2, 0x80, 0x80, 0xBC, 0xC2, 0x80, 0x80, 0xCE, 0xB0, 0x80, 0x80, 0xE1, 0x9D, 0x80, 0x80, 0xF4, 0x8A,
		0x80, 0x8A, 0xF4, 0x80, 0x80, 0x9D, 0xE1, 0x80, 0x80, 0xB0, 0xCE, 0x80, 0x80, 0xC2, 0xBC, 0x80, 0x80, 0xD2, 0xAC, 0x80, 0x80, 0xE1, 0x9D, 0x80, 0x80, 0xEE, 0x90, 0x80, 0x80, 0xF9, 0x85, 0x80,
		0x80, 0x80, 0x85, 0xF9, 0x80, 0x80, 0x90, 0xEE, 0x80, 0x80, 0x9D, 0xE1, 0x80, 0x80, 0xAC, 0xD2, 0x80, 0x80, 0xBC, 0xC2, 0x80, 0x80, 0xCE, 0xB0, 0x80, 0x80, 0xE1, 0x9D, 0x80, 0x80, 0xF4, 0x8A,
		0x80, 0x8A, 0xF4, 0x80, 0x80, 0x9D, 0xE1, 0x80, 0x80, 0xB0, 0xCE, 0x80, 0x80, 0xC2, 0xBC, 0x80, 0x80, 0xD2, 0xAC, 0x80, 0x80, 0xE1, 0x9D, 0x80, 0x80, 0xEE, 0x90, 0x80, 0x80, 0xF9, 0x85, 0x80,
		0x80, 0x80, 0x85, 0xF9, 0x80, 0x80, 0x90, 0xEE, 0x80, 0x80, 0x9D, 0xE1, 0x80, 0x80, 0xAC, 0xD2, 0x80, 0x80, 0xBC, 0xC2, 0x80, 0x80, 0xCE, 0xB0, 0x80, 0x80, 0xE1, 0x9D, 0x80, 0x80, 0xF4, 0x8A,
		0x80, 0x8A, 0xF4, 0x80, 0x80, 0x9D, 0xE1, 0x80, 0x80, 0xB0, 0xCE, 0x80, 0x80, 0xC2, 0xBC, 0x80, 0x80, 0xD2, 0xAC, 0x80, 0x80, 0xE1, 0x9D, 0x80, 0x80, 0xEE, 0x90, 0x80, 0x80, 0xF9, 0x85, 0x80,
		0x80, 0x80, 0x85, 0xF9, 0x80, 0x80, 0x90, 0xEE, 0x80, 0x80, 0x9D, 0xE1, 0x80, 0x80, 0xAC, 0xD2, 0x80, 0x80, 0xBC, 0xC2, 0x80, 0x80, 0xCE, 0xB0, 0x80, 0x80, 0xE1, 0x9D, 0x80, 0x80, 0xF4, 0x8A,
		0x80, 0x8A, 0xF4, 0x80, 0x80, 0x9D, 0xE1, 0x80, 0x80, 0xB0, 0xCE, 0x80, 0x80, 0xC2, 0xBC, 0x80, 0x80, 0xD2, 0xAC, 0x80, 0x80, 0xE1, 0x9D, 0x80, 0x80, 0xEE, 0x90, 0x80, 0x80, 0xF9, 0x85, 0x80,
		0x80, 0x80, 0x85, 0xF9, 0x80, 0x80, 0x90, 0xEE, 0x80, 0x80, 0x9D, 0xE1, 0x80, 0x80, 0xAC, 0xD2, 0x80, 0x80, 0xBC, 0xC2, 0x80, 0x80, 0xCE, 0xB0, 0x80, 0x80, 0xE1, 0x9D, 0x80, 0x80, 0xF4, 0x8A, 
		0x80, 0x8A, 0xF4, 0x80, 0x80, 0x9D, 0xE1, 0x80, 0x80, 0xB0, 0xCE, 0x80, 0x80, 0xC2, 0xBC, 0x80, 0x80, 0xD2, 0xAC, 0x80, 0x80, 0xE1, 0x9D, 0x80, 0x80, 0xEE, 0x90, 0x80, 0x80, 0xF9, 0x85, 0x80,
		0x80, 0x80, 0x85, 0xF9, 0x80, 0x80, 0x90, 0xEE, 0x80, 0x80, 0x9D, 0xE1, 0x80, 0x80, 0xAC, 0xD2, 0x80, 0x80, 0xBC, 0xC2, 0x80, 0x80, 0xCE, 0xB0, 0x80, 0x80, 0xE1, 0x9D, 0x80, 0x80, 0xF4, 0x8A,
		0x80, 0x8A, 0xF4, 0x80, 0x80, 0x9D, 0xE1, 0x80, 0x80, 0xB0, 0xCE, 0x80, 0x80, 0xC2, 0xBC, 0x80, 0x80, 0xD2, 0xAC, 0x80, 0x80, 0xE1, 0x9D, 0x80, 0x80, 0xEE, 0x90, 0x80, 0x80, 0xF9, 0x85, 0x80, 
		0x80, 0x80, 0x85, 0xF9, 0x80, 0x80, 0x90, 0xEE, 0x80, 0x80, 0x9D, 0xE1, 0x80, 0x80, 0xAC, 0xD2, 0x80, 0x80, 0xBC, 0xC2, 0x80, 0x80, 0xCE, 0xB0, 0x80, 0x80, 0xE1, 0x9D, 0x80, 0x80, 0xF4, 0x8A,
		0x80, 0x8A, 0xF4, 0x80, 0x80, 0x9D, 0xE1, 0x80, 0x80, 0xB0, 0xCE, 0x80, 0x80, 0xC2, 0xBC, 0x80, 0x80, 0xD2, 0xAC, 0x80, 0x80, 0xE1, 0x9D, 0x80, 0x80, 0xEE, 0x90, 0x80, 0x80, 0xF9, 0x85, 0x80, 
		0x80, 0x80, 0x85, 0xF9, 0x80, 0x80, 0x90, 0xEE, 0x80, 0x80, 0x9D, 0xE1, 0x80, 0x80, 0xAC, 0xD2, 0x80, 0x80, 0xBC, 0xC2, 0x80, 0x80, 0xCE, 0xB0, 0x80, 0x80, 0xE1, 0x9D, 0x80, 0x80, 0xF4, 0x8A,
		0x80, 0x8A, 0xF4, 0x80, 0x80, 0x9D, 0xE1, 0x80, 0x80, 0xB0, 0xCE, 0x80, 0x80, 0xC2, 0xBC, 0x80, 0x80, 0xD2, 0xAC, 0x80, 0x80, 0xE1, 0x9D, 0x80, 0x80, 0xEE, 0x90, 0x80, 0x80, 0xF9, 0x85, 0x80,
		0x80, 0x80, 0x85, 0xF9, 0x80, 0x80, 0x90, 0xEE, 0x80, 0x80, 0x9D, 0xE1, 0x80, 0x80, 0xAC, 0xD2, 0x80, 0x80, 0xBC, 0xC2, 0x80, 0x80, 0xCE, 0xB0, 0x80, 0x80, 0xE1, 0x9D, 0x80, 0x80, 0xF4, 0x8A, 
		0x80, 0x8A, 0xF4, 0x80, 0x80, 0x9D, 0xE1, 0x80, 0x80, 0xB0, 0xCE, 0x80, 0x80, 0xC2, 0xBC, 0x80, 0x80, 0xD2, 0xAC, 0x80, 0x80, 0xE1, 0x9D, 0x80, 0x80, 0xEE, 0x90, 0x80, 0x80, 0xF9, 0x85, 0x80,
		0x80, 0x80, 0x85, 0xF9, 0x80, 0x80, 0x90, 0xEE, 0x80, 0x80, 0x9D, 0xE1, 0x80, 0x80, 0xAC, 0xD2, 0x80, 0x80, 0xBC, 0xC2, 0x80, 0x80, 0xCE, 0xB0, 0x80, 0x80, 0xE1, 0x9D, 0x80, 0x80, 0xF4, 0x8A, 
		0x80, 0x8A, 0xF4, 0x80, 0x80, 0x9D, 0xE1, 0x80, 0x80, 0xB0, 0xCE, 0x80, 0x80, 0xC2, 0xBC, 0x80, 0x80, 0xD2, 0xAC, 0x80, 0x80, 0xE1, 0x9D, 0x80, 0x80, 0xEE, 0x90, 0x80, 0x80, 0xF9, 0x85, 0x80, 
		0x80, 0x80, 0x85, 0xF9, 0x80, 0x80, 0x90, 0xEE, 0x80, 0x80, 0x9D, 0xE1, 0x80, 0x80, 0xAC, 0xD2, 0x80, 0x80, 0xBC, 0xC2, 0x80, 0x80, 0xCE, 0xB0, 0x80, 0x80, 0xE1, 0x9D, 0x80, 0x80, 0xF4, 0x8A,
		0x80, 0x8A, 0xF4, 0x80, 0x80, 0x9D, 0xE1, 0x80, 0x80, 0xB0, 0xCE, 0x80, 0x80, 0xC2, 0xBC, 0x80, 0x80, 0xD2, 0xAC, 0x80, 0x80, 0xE1, 0x9D, 0x80, 0x80, 0xEE, 0x90, 0x80, 0x80, 0xF9, 0x85, 0x80,
		0x80, 0x80, 0x85, 0xF9, 0x80, 0x80, 0x90, 0xEE, 0x80, 0x80, 0x9D, 0xE1, 0x80, 0x80, 0xAC, 0xD2, 0x80, 0x80, 0xBC, 0xC2, 0x80, 0x80, 0xCE, 0xB0, 0x80, 0x80, 0xE1, 0x9D, 0x80, 0x80, 0xF4, 0x8A,
		0x80, 0x8A, 0xF4, 0x80, 0x80, 0x9D, 0xE1, 0x80, 0x80, 0xB0, 0xCE, 0x80, 0x80, 0xC2, 0xBC, 0x80, 0x80, 0xD2, 0xAC, 0x80, 0x80, 0xE1, 0x9D, 0x80, 0x80, 0xEE, 0x90, 0x80, 0x80, 0xF9, 0x85, 0x80, 
		0x80, 0x80, 0x85, 0xF9, 0x80, 0x80, 0x90, 0xEE, 0x80, 0x80, 0x9D, 0xE1, 0x80, 0x80, 0xAC, 0xD2, 0x80, 0x80, 0xBC, 0xC2, 0x80, 0x80, 0xCE, 0xB0, 0x80, 0x80, 0xE1, 0x9D, 0x80, 0x80, 0xF4, 0x8A,
		0x80, 0x8A, 0xF4, 0x80, 0x80, 0x9D, 0xE1, 0x80, 0x80, 0xB0, 0xCE, 0x80, 0x80, 0xC2, 0xBC, 0x80, 0x80, 0xD2, 0xAC, 0x80, 0x80, 0xE1, 0x9D, 0x80, 0x80, 0xEE, 0x90, 0x80, 0x80, 0xF9, 0x85, 0x80,
		0x80, 0x80, 0x85, 0xF9, 0x80, 0x80, 0x90, 0xEE, 0x80, 0x80, 0x9D, 0xE1, 0x80, 0x80, 0xAC, 0xD2, 0x80, 0x80, 0xBC, 0xC2, 0x80, 0x80, 0xCE, 0xB0, 0x80, 0x80, 0xE1, 0x9D, 0x80, 0x80, 0xF4, 0x8A,
		0x80, 0x8A, 0xF4, 0x80, 0x80, 0x9D, 0xE1, 0x80, 0x80, 0xB0, 0xCE, 0x80, 0x80, 0xC2, 0xBC, 0x80, 0x80, 0xD2, 0xAC, 0x80, 0x80, 0xE1, 0x9D, 0x80, 0x80, 0xEE, 0x90, 0x80, 0x80, 0xF9, 0x85, 0x80,
		0x80, 0x07, 0x7B, 0x80, 0x80, 0x12, 0x70, 0x80, 0x80, 0x1F, 0x63, 0x80, 0x80, 0x2E, 0x54, 0x80, 0x80, 0x3E, 0x44, 0x80, 0x80, 0x50, 0x32, 0x80, 0x80, 0x63, 0x1F, 0x80, 0x80, 0x76, 0x0C, 0x80,
		0x80, 0x80, 0x0C, 0x76, 0x80, 0x80, 0x1F, 0x63, 0x80, 0x80, 0x32, 0x50, 0x80, 0x80, 0x44, 0x3E, 0x80, 0x80, 0x54, 0x2E, 0x80, 0x80, 0x63, 0x1F, 0x80, 0x80, 0x70, 0x12, 0x80, 0x80, 0x7B, 0x07,
		0x80, 0x07, 0x7B, 0x80, 0x80, 0x12, 0x70, 0x80, 0x80, 0x1F, 0x63, 0x80, 0x80, 0x2E, 0x54, 0x80, 0x80, 0x3E, 0x44, 0x80, 0x80, 0x50, 0x32, 0x80, 0x80, 0x63, 0x1F, 0x80, 0x80, 0x76, 0x0C, 0x80,
		0x80, 0x80, 0x0C, 0x76, 0x80, 0x80, 0x1F, 0x63, 0x80, 0x80, 0x32, 0x50, 0x80, 0x80, 0x44, 0x3E, 0x80, 0x80, 0x54, 0x2E, 0x80, 0x80, 0x63, 0x1F, 0x80, 0x80, 0x70, 0x12, 0x80, 0x80, 0x7B, 0x07,
		0x80, 0x07, 0x7B, 0x80, 0x80, 0x12, 0x70, 0x80, 0x80, 0x1F, 0x63, 0x80, 0x80, 0x2E, 0x54, 0x80, 0x80, 0x3E, 0x44, 0x80, 0x80, 0x50, 0x32, 0x80, 0x80, 0x63, 0x1F, 0x80, 0x80, 0x76, 0x0C, 0x80,
		0x80, 0x80, 0x0C, 0x76, 0x80, 0x80, 0x1F, 0x63, 0x80, 0x80, 0x32, 0x50, 0x80, 0x80, 0x44, 0x3E, 0x80, 0x80, 0x54, 0x2E, 0x80, 0x80, 0x63, 0x1F, 0x80, 0x80, 0x70, 0x12, 0x80, 0x80, 0x7B, 0x07,
		0x80, 0x07, 0x7B, 0x80, 0x80, 0x12, 0x70, 0x80, 0x80, 0x1F, 0x63, 0x80, 0x80, 0x2E, 0x54, 0x80, 0x80, 0x3E, 0x44, 0x80, 0x80, 0x50, 0x32, 0x80, 0x80, 0x63, 0x1F, 0x80, 0x80, 0x76, 0x0C, 0x80,
		0x80, 0x80, 0x0C, 0x76, 0x80, 0x80, 0x1F, 0x63, 0x80, 0x80, 0x32, 0x50, 0x80, 0x80, 0x44, 0x3E, 0x80, 0x80, 0x54, 0x2E, 0x80, 0x80, 0x63, 0x1F, 0x80, 0x80, 0x70, 0x12, 0x80, 0x80, 0x7B, 0x07,
		0x80, 0x07, 0x7B, 0x80, 0x80, 0x12, 0x70, 0x80, 0x80, 0x1F, 0x63, 0x80, 0x80, 0x2E, 0x54, 0x80, 0x80, 0x3E, 0x44, 0x80, 0x80, 0x50, 0x32, 0x80, 0x80, 0x63, 0x1F, 0x80, 0x80, 0x76, 0x0C, 0x80,
		0x80, 0x80, 0x0C, 0x76, 0x80, 0x80, 0x1F, 0x63, 0x80, 0x80, 0x32, 0x50, 0x80, 0x80, 0x44, 0x3E, 0x80, 0x80, 0x54, 0x2E, 0x80, 0x80, 0x63, 0x1F, 0x80, 0x80, 0x70, 0x12, 0x80, 0x80, 0x7B, 0x07,
		0x80, 0x07, 0x7B, 0x80, 0x80, 0x12, 0x70, 0x80, 0x80, 0x1F, 0x63, 0x80, 0x80, 0x2E, 0x54, 0x80, 0x80, 0x3E, 0x44, 0x80, 0x80, 0x50, 0x32, 0x80, 0x80, 0x63, 0x1F, 0x80, 0x80, 0x76, 0x0C, 0x80,
		0x80, 0x80, 0x0C, 0x76, 0x80, 0x80, 0x1F, 0x63, 0x80, 0x80, 0x32, 0x50, 0x80, 0x80, 0x44, 0x3E, 0x80, 0x80, 0x54, 0x2E, 0x80, 0x80, 0x63, 0x1F, 0x80, 0x80, 0x70, 0x12, 0x80, 0x80, 0x7B, 0x07,
		0x80, 0x07, 0x7B, 0x80, 0x80, 0x12, 0x70, 0x80, 0x80, 0x1F, 0x63, 0x80, 0x80, 0x2E, 0x54, 0x80, 0x80, 0x3E, 0x44, 0x80, 0x80, 0x50, 0x32, 0x80, 0x80, 0x63, 0x1F, 0x80, 0x80, 0x76, 0x0C, 0x80,
		0x80, 0x80, 0x0C, 0x76, 0x80, 0x80, 0x1F, 0x63, 0x80, 0x80, 0x32, 0x50, 0x80, 0x80, 0x44, 0x3E, 0x80, 0x80, 0x54, 0x2E, 0x80, 0x80, 0x63, 0x1F, 0x80, 0x80, 0x70, 0x12, 0x80, 0x80, 0x7B, 0x07,
		0x80, 0x07, 0x7B, 0x80, 0x80, 0x12, 0x70, 0x80, 0x80, 0x1F, 0x63, 0x80, 0x80, 0x2E, 0x54, 0x80, 0x80, 0x3E, 0x44, 0x80, 0x80, 0x50, 0x32, 0x80, 0x80, 0x63, 0x1F, 0x80, 0x80, 0x76, 0x0C, 0x80,
		0x80, 0x80, 0x0C, 0x76, 0x80, 0x80, 0x1F, 0x63, 0x80, 0x80, 0x32, 0x50, 0x80, 0x80, 0x44, 0x3E, 0x80, 0x80, 0x54, 0x2E, 0x80, 0x80, 0x63, 0x1F, 0x80, 0x80, 0x70, 0x12, 0x80, 0x80, 0x7B, 0x07,
		0x80, 0x07, 0x7B, 0x80, 0x80, 0x12, 0x70, 0x80, 0x80, 0x1F, 0x63, 0x80, 0x80, 0x2E, 0x54, 0x80, 0x80, 0x3E, 0x44, 0x80, 0x80, 0x50, 0x32, 0x80, 0x80, 0x63, 0x1F, 0x80, 0x80, 0x76, 0x0C, 0x80,
		0x80, 0x80, 0x0C, 0x76, 0x80, 0x80, 0x1F, 0x63, 0x80, 0x80, 0x32, 0x50, 0x80, 0x80, 0x44, 0x3E, 0x80, 0x80, 0x54, 0x2E, 0x80, 0x80, 0x63, 0x1F, 0x80, 0x80, 0x70, 0x12, 0x80, 0x80, 0x7B, 0x07,
		0x80, 0x07, 0x7B, 0x80, 0x80, 0x12, 0x70, 0x80, 0x80, 0x1F, 0x63, 0x80, 0x80, 0x2E, 0x54, 0x80, 0x80, 0x3E, 0x44, 0x80, 0x80, 0x50, 0x32, 0x80, 0x80, 0x63, 0x1F, 0x80, 0x80, 0x76, 0x0C, 0x80,
		0x80, 0x80, 0x0C, 0x76, 0x80, 0x80, 0x1F, 0x63, 0x80, 0x80, 0x32, 0x50, 0x80, 0x80, 0x44, 0x3E, 0x80, 0x80, 0x54, 0x2E, 0x80, 0x80, 0x63, 0x1F, 0x80, 0x80, 0x70, 0x12, 0x80, 0x80, 0x7B, 0x07,
		0x80, 0x07, 0x7B, 0x80, 0x80, 0x12, 0x70, 0x80, 0x80, 0x1F, 0x63, 0x80, 0x80, 0x2E, 0x54, 0x80, 0x80, 0x3E, 0x44, 0x80, 0x80, 0x50, 0x32, 0x80, 0x80, 0x63, 0x1F, 0x80, 0x80, 0x76, 0x0C, 0x80,
		0x80, 0x80, 0x0C, 0x76, 0x80, 0x80, 0x1F, 0x63, 0x80, 0x80, 0x32, 0x50, 0x80, 0x80, 0x44, 0x3E, 0x80, 0x80, 0x54, 0x2E, 0x80, 0x80, 0x63, 0x1F, 0x80, 0x80, 0x70, 0x12, 0x80, 0x80, 0x7B, 0x07,
		0x80, 0x07, 0x7B, 0x80, 0x80, 0x12, 0x70, 0x80, 0x80, 0x1F, 0x63, 0x80, 0x80, 0x2E, 0x54, 0x80, 0x80, 0x3E, 0x44, 0x80, 0x80, 0x50, 0x32, 0x80, 0x80, 0x63, 0x1F, 0x80, 0x80, 0x76, 0x0C, 0x80,
		0x80, 0x80, 0x0C, 0x76, 0x80, 0x80, 0x1F, 0x63, 0x80, 0x80, 0x32, 0x50, 0x80, 0x80, 0x44, 0x3E, 0x80, 0x80, 0x54, 0x2E, 0x80, 0x80, 0x63, 0x1F, 0x80, 0x80, 0x70, 0x12, 0x80, 0x80, 0x7B, 0x07,
		0x80, 0x07, 0x7B, 0x80, 0x80, 0x12, 0x70, 0x80, 0x80, 0x1F, 0x63, 0x80, 0x80, 0x2E, 0x54, 0x80, 0x80, 0x3E, 0x44, 0x80, 0x80, 0x50, 0x32, 0x80, 0x80, 0x63, 0x1F, 0x80, 0x80, 0x76, 0x0C, 0x80,
		0x80, 0x80, 0x0C, 0x76, 0x80, 0x80, 0x1F, 0x63, 0x80, 0x80, 0x32, 0x50, 0x80, 0x80, 0x44, 0x3E, 0x80, 0x80, 0x54, 0x2E, 0x80, 0x80, 0x63, 0x1F, 0x80, 0x80, 0x70, 0x12, 0x80, 0x80, 0x7B, 0x07,
		0x80, 0x07, 0x7B, 0x80, 0x80, 0x12, 0x70, 0x80, 0x80, 0x1F, 0x63, 0x80, 0x80, 0x2E, 0x54, 0x80, 0x80, 0x3E, 0x44, 0x80, 0x80, 0x50, 0x32, 0x80, 0x80, 0x63, 0x1F, 0x80, 0x80, 0x76, 0x0C, 0x80,
		0x80, 0x80, 0x0C, 0x76, 0x80, 0x80, 0x1F, 0x63, 0x80, 0x80, 0x32, 0x50, 0x80, 0x80, 0x44, 0x3E, 0x80, 0x80, 0x54, 0x2E, 0x80, 0x80, 0x63, 0x1F, 0x80, 0x80, 0x70, 0x12, 0x80, 0x80, 0x7B, 0x07,
		0x80, 0x07, 0x7B, 0x80, 0x80, 0x12, 0x70, 0x80, 0x80, 0x1F, 0x63, 0x80, 0x80, 0x2E, 0x54, 0x80, 0x80, 0x3E, 0x44, 0x80, 0x80, 0x50, 0x32, 0x80, 0x80, 0x63, 0x1F, 0x80, 0x80, 0x76, 0x0C, 0x80,
		0x80, 0x80, 0x0C, 0x76, 0x80, 0x80, 0x1F, 0x63, 0x80, 0x80, 0x32, 0x50, 0x80, 0x80, 0x44, 0x3E, 0x80, 0x80, 0x54, 0x2E, 0x80, 0x80, 0x63, 0x1F, 0x80, 0x80, 0x70, 0x12, 0x80, 0x80, 0x7B, 0x07,
		0x80, 0x07, 0x7B, 0x80, 0x80, 0x12, 0x70, 0x80, 0x80, 0x1F, 0x63, 0x80, 0x80, 0x2E, 0x54, 0x80, 0x80, 0x3E, 0x44, 0x80, 0x80, 0x50, 0x32, 0x80, 0x80, 0x63, 0x1F, 0x80, 0x80, 0x76, 0x0C, 0x80,
		0x80, 0x80, 0x0C, 0x76, 0x80, 0x80, 0x1F, 0x63, 0x80, 0x80, 0x32, 0x50, 0x80, 0x80, 0x44, 0x3E, 0x80, 0x80, 0x54, 0x2E, 0x80, 0x80, 0x63, 0x1F, 0x80, 0x80, 0x70, 0x12, 0x80, 0x80, 0x7B, 0x07,
		0x80, 0x80, 0x80, 0xFF, 0x80, 0x80, 0x8B, 0xF3, 0x80, 0x80, 0x98, 0xE6, 0x80, 0x80, 0xA7, 0xD7, 0x80, 0x80, 0xB8, 0xC6, 0x80, 0x80, 0xCA, 0xB4, 0x80, 0x80, 0xDF, 0x9F, 0x80, 0x80, 0xF4, 0x8A,
		0x80, 0x8A, 0xF4, 0x80, 0x80, 0x9F, 0xDF, 0x80, 0x80, 0xB4, 0xCA, 0x80, 0x80, 0xC6, 0xB8, 0x80, 0x80, 0xD7, 0xA7, 0x80, 0x80, 0xE6, 0x98, 0x80, 0x80, 0xF3, 0x8B, 0x80, 0x80, 0xFF, 0x80, 0x80,
		0x75, 0x80, 0x80, 0xF3, 0x80, 0x80, 0x80, 0xFF, 0x80, 0x80, 0x8D, 0xF1, 0x80, 0x80, 0x9D, 0xE1, 0x80, 0x80, 0xAF, 0xCF, 0x80, 0x80, 0xC3, 0xBB, 0x80, 0x80, 0xDA, 0xA4, 0x80, 0x80, 0xF2, 0x8C,
		0x80, 0x8C, 0xF2, 0x80, 0x80, 0xA4, 0xDA, 0x80, 0x80, 0xBB, 0xC3, 0x80, 0x80, 0xCF, 0xAF, 0x80, 0x80, 0xE1, 0x9D, 0x80, 0x80, 0xF1, 0x8D, 0x80, 0x80, 0xFF, 0x80, 0x80, 0x8B, 0xF3, 0x80, 0x80,
		0x68, 0x80, 0x80, 0xE6, 0x73, 0x80, 0x80, 0xF1, 0x80, 0x80, 0x80, 0xFF, 0x80, 0x80, 0x90, 0xEE, 0x80, 0x80, 0xA3, 0xDB, 0x80, 0x80, 0xBA, 0xC4, 0x80, 0x80, 0xD3, 0xAB, 0x80, 0x80, 0xF0, 0x8E,
		0x80, 0x8E, 0xF0, 0x80, 0x80, 0xAB, 0xD3, 0x80, 0x80, 0xC4, 0xBA, 0x80, 0x80, 0xDB, 0xA3, 0x80, 0x80, 0xEE, 0x90, 0x80, 0x80, 0xFF, 0x80, 0x80, 0x8D, 0xF1, 0x80, 0x80, 0x98, 0xE6, 0x80, 0x80,
		0x59, 0x80, 0x80, 0xD7, 0x63, 0x80, 0x80, 0xE1, 0x70, 0x80, 0x80, 0xEE, 0x80, 0x80, 0x80, 0xFF, 0x80, 0x80, 0x94, 0xEA, 0x80, 0x80, 0xAD, 0xD1, 0x80, 0x80, 0xCA, 0xB4, 0x80, 0x80, 0xED, 0x91,
		0x80, 0x91, 0xED, 0x80, 0x80, 0xB4, 0xCA, 0x80, 0x80, 0xD1, 0xAD, 0x80, 0x80, 0xEA, 0x94, 0x80, 0x80, 0xFF, 0x80, 0x80, 0x90, 0xEE, 0x80, 0x80, 0x9D, 0xE1, 0x80, 0x80, 0xA7, 0xD7, 0x80, 0x80,
		0x48, 0x80, 0x80, 0xC6, 0x51, 0x80, 0x80, 0xCF, 0x5D, 0x80, 0x80, 0xDB, 0x6C, 0x80, 0x80, 0xEA, 0x80, 0x80, 0x80, 0xFF, 0x80, 0x80, 0x9A, 0xE4, 0x80, 0x80, 0xBD, 0xC1, 0x80, 0x80, 0xE8, 0x96,
		0x80, 0x96, 0xE8, 0x80, 0x80, 0xC1, 0xBD, 0x80, 0x80, 0xE4, 0x9A, 0x80, 0x80, 0xFF, 0x80, 0x80, 0x94, 0xEA, 0x80, 0x80, 0xA3, 0xDB, 0x80, 0x80, 0xAF, 0xCF, 0x80, 0x80, 0xB8, 0xC6, 0x80, 0x80,
		0x36, 0x80, 0x80, 0xB4, 0x3D, 0x80, 0x80, 0xBB, 0x46, 0x80, 0x80, 0xC4, 0x53, 0x80, 0x80, 0xD1, 0x66, 0x80, 0x80, 0xE4, 0x80, 0x80, 0x80, 0xFF, 0x80, 0x80, 0xA7, 0xD7, 0x80, 0x80, 0xDF, 0x9F,
		0x80, 0x9F, 0xDF, 0x80, 0x80, 0xD7, 0xA7, 0x80, 0x80, 0xFF, 0x80, 0x80, 0x9A, 0xE4, 0x80, 0x80, 0xAD, 0xD1, 0x80, 0x80, 0xBA, 0xC4, 0x80, 0x80, 0xC3, 0xBB, 0x80, 0x80, 0xCA, 0xB4, 0x80, 0x80,
		0x21, 0x80, 0x80, 0x9F, 0x26, 0x80, 0x80, 0xA4, 0x2D, 0x80, 0x80, 0xAB, 0x36, 0x80, 0x80, 0xB4, 0x43, 0x80, 0x80, 0xC1, 0x59, 0x80, 0x80, 0xD7, 0x80, 0x80, 0x80, 0xFF, 0x80, 0x80, 0xCA, 0xB4,
		0x80, 0xB4, 0xCA, 0x80, 0x80, 0xFF, 0x80, 0x80, 0xA7, 0xD7, 0x80, 0x80, 0xBD, 0xC1, 0x80, 0x80, 0xCA, 0xB4, 0x80, 0x80, 0xD3, 0xAB, 0x80, 0x80, 0xDA, 0xA4, 0x80, 0x80, 0xDF, 0x9F, 0x80, 0x80,
		0x0C, 0x80, 0x80, 0x8A, 0x0E, 0x80, 0x80, 0x8C, 0x10, 0x80, 0x80, 0x8E, 0x13, 0x80, 0x80, 0x91, 0x18, 0x80, 0x80, 0x96, 0x21, 0x80, 0x80, 0x9F, 0x36, 0x80, 0x80, 0xB4, 0x80, 0x80, 0x80, 0xFF,
		0x80, 0xFF, 0x80, 0x80, 0xCA, 0xB4, 0x80, 0x80, 0xDF, 0x9F, 0x80, 0x80, 0xE8, 0x96, 0x80, 0x80, 0xED, 0x91, 0x80, 0x80, 0xF0, 0x8E, 0x80, 0x80, 0xF2, 0x8C, 0x80, 0x80, 0xF4, 0x8A, 0x80, 0x80,
		0x0C, 0x76, 0x80, 0x80, 0x0E, 0x74, 0x80, 0x80, 0x10, 0x72, 0x80, 0x80, 0x13, 0x6F, 0x80, 0x80, 0x18, 0x6A, 0x80, 0x80, 0x21, 0x61, 0x80, 0x80, 0x36, 0x4C, 0x80, 0x80, 0x80, 0x01, 0x80, 0x80,
		0x80, 0x80, 0x80, 0x01, 0xCA, 0x80, 0x80, 0x4C, 0xDF, 0x80, 0x80, 0x61, 0xE8, 0x80, 0x80, 0x6A, 0xED, 0x80, 0x80, 0x6F, 0xF0, 0x80, 0x80, 0x72, 0xF2, 0x80, 0x80, 0x74, 0xF4, 0x80, 0x80, 0x76,
		0x21, 0x61, 0x80, 0x80, 0x26, 0x5C, 0x80, 0x80, 0x2D, 0x55, 0x80, 0x80, 0x36, 0x4C, 0x80, 0x80, 0x43, 0x3F, 0x80, 0x80, 0x59, 0x29, 0x80, 0x80, 0x80, 0x01, 0x80, 0x80, 0x80, 0x4C, 0x36, 0x80,
		0x80, 0x80, 0x36, 0x4C, 0x80, 0x80, 0x80, 0x01, 0xA7, 0x80, 0x80, 0x29, 0xBD, 0x80, 0x80, 0x3F, 0xCA, 0x80, 0x80, 0x4C, 0xD3, 0x80, 0x80, 0x55, 0xDA, 0x80, 0x80, 0x5C, 0xDF, 0x80, 0x80, 0x61,
		0x36, 0x4C, 0x80, 0x80, 0x3D, 0x45, 0x80, 0x80, 0x46, 0x3C, 0x80, 0x80, 0x53, 0x2F, 0x80, 0x80, 0x66, 0x1C, 0x80, 0x80, 0x80, 0x01, 0x80, 0x80, 0x80, 0x29, 0x59, 0x80, 0x80, 0x61, 0x21, 0x80,
		0x80, 0x80, 0x21, 0x61, 0x80, 0x80, 0x59, 0x29, 0x80, 0x80, 0x80, 0x01, 0x9A, 0x80, 0x80, 0x1C, 0xAD, 0x80, 0x80, 0x2F, 0xBA, 0x80, 0x80, 0x3C, 0xC3, 0x80, 0x80, 0x45, 0xCA, 0x80, 0x80, 0x4C,
		0x48, 0x3A, 0x80, 0x80, 0x51, 0x31, 0x80, 0x80, 0x5D, 0x25, 0x80, 0x80, 0x6C, 0x16, 0x80, 0x80, 0x80, 0x01, 0x80, 0x80, 0x80, 0x1C, 0x66, 0x80, 0x80, 0x3F, 0x43, 0x80, 0x80, 0x6A, 0x18, 0x80,
		0x80, 0x80, 0x18, 0x6A, 0x80, 0x80, 0x43, 0x3F, 0x80, 0x80, 0x66, 0x1C, 0x80, 0x80, 0x80, 0x01, 0x94, 0x80, 0x80, 0x16, 0xA3, 0x80, 0x80, 0x25, 0xAF, 0x80, 0x80, 0x31, 0xB8, 0x80, 0x80, 0x3A,
		0x59, 0x29, 0x80, 0x80, 0x63, 0x1F, 0x80, 0x80, 0x70, 0x12, 0x80, 0x80, 0x80, 0x01, 0x80, 0x80, 0x80, 0x16, 0x6C, 0x80, 0x80, 0x2F, 0x53, 0x80, 0x80, 0x4C, 0x36, 0x80, 0x80, 0x6F, 0x13, 0x80,
		0x80, 0x80, 0x13, 0x6F, 0x80, 0x80, 0x36, 0x4C, 0x80, 0x80, 0x53, 0x2F, 0x80, 0x80, 0x6C, 0x16, 0x80, 0x80, 0x80, 0x01, 0x90, 0x80, 0x80, 0x12, 0x9D, 0x80, 0x80, 0x1F, 0xA7, 0x80, 0x80, 0x29,
		0x68, 0x1A, 0x80, 0x80, 0x73, 0x0F, 0x80, 0x80, 0x80, 0x01, 0x80, 0x80, 0x80, 0x12, 0x70, 0x80, 0x80, 0x25, 0x5D, 0x80, 0x80, 0x3C, 0x46, 0x80, 0x80, 0x55, 0x2D, 0x80, 0x80, 0x72, 0x10, 0x80,
		0x80, 0x80, 0x10, 0x72, 0x80, 0x80, 0x2D, 0x55, 0x80, 0x80, 0x46, 0x3C, 0x80, 0x80, 0x5D, 0x25, 0x80, 0x80, 0x70, 0x12, 0x80, 0x80, 0x80, 0x01, 0x8D, 0x80, 0x80, 0x0F, 0x98, 0x80, 0x80, 0x1A,
		0x75, 0x0D, 0x80, 0x80, 0x80, 0x01, 0x80, 0x80, 0x80, 0x0F, 0x73, 0x80, 0x80, 0x1F, 0x63, 0x80, 0x80, 0x31, 0x51, 0x80, 0x80, 0x45, 0x3D, 0x80, 0x80, 0x5C, 0x26, 0x80, 0x80, 0x74, 0x0E, 0x80,
		0x80, 0x80, 0x0E, 0x74, 0x80, 0x80, 0x26, 0x5C, 0x80, 0x80, 0x3D, 0x45, 0x80, 0x80, 0x51, 0x31, 0x80, 0x80, 0x63, 0x1F, 0x80, 0x80, 0x73, 0x0F, 0x80, 0x80, 0x80, 0x01, 0x8B, 0x80, 0x80, 0x0D,
		0x80, 0x01, 0x80, 0x80, 0x80, 0x0D, 0x75, 0x80, 0x80, 0x1A, 0x68, 0x80, 0x80, 0x29, 0x59, 0x80, 0x80, 0x3A, 0x48, 0x80, 0x80, 0x4C, 0x36, 0x80, 0x80, 0x61, 0x21, 0x80, 0x80, 0x76, 0x0C, 0x80,
		0x80, 0x80, 0x0C, 0x76, 0x80, 0x80, 0x21, 0x61, 0x80, 0x80, 0x36, 0x4C, 0x80, 0x80, 0x48, 0x3A, 0x80, 0x80, 0x59, 0x29, 0x80, 0x80, 0x68, 0x1A, 0x80, 0x80, 0x75, 0x0D, 0x80, 0x80, 0x80, 0x01,
		0x80, 0xFF, 0x80, 0x80, 0x80, 0xF3, 0x8B, 0x80, 0x80, 0xE6, 0x98, 0x80, 0x80, 0xD7, 0xA7, 0x80, 0x80, 0xC6, 0xB8, 0x80, 0x80, 0xB4, 0xCA, 0x80, 0x80, 0x9F, 0xDF, 0x80, 0x80, 0x8A, 0xF4, 0x80,
		0x80, 0x80, 0xF4, 0x8A, 0x80, 0x80, 0xDF, 0x9F, 0x80, 0x80, 0xCA, 0xB4, 0x80, 0x80, 0xB8, 0xC6, 0x80, 0x80, 0xA7, 0xD7, 0x80, 0x80, 0x98, 0xE6, 0x80, 0x80, 0x8B, 0xF3, 0x80, 0x80, 0x80, 0xFF,
		0x8B, 0xF3, 0x80, 0x80, 0x80, 0xFF, 0x80, 0x80, 0x80, 0xF1, 0x8D, 0x80, 0x80, 0xE1, 0x9D, 0x80, 0x80, 0xCF, 0xAF, 0x80, 0x80, 0xBB, 0xC3, 0x80, 0x80, 0xA4, 0xDA, 0x80, 0x80, 0x8C, 0xF2, 0x80,
		0x80, 0x80, 0xF2, 0x8C, 0x80, 0x80, 0xDA, 0xA4, 0x80, 0x80, 0xC3, 0xBB, 0x80, 0x80, 0xAF, 0xCF, 0x80, 0x80, 0x9D, 0xE1, 0x80, 0x80, 0x8D, 0xF1, 0x80, 0x80, 0x80, 0xFF, 0x75, 0x80, 0x80, 0xF3,
		0x98, 0xE6, 0x80, 0x80, 0x8D, 0xF1, 0x80, 0x80, 0x80, 0xFF, 0x80, 0x80, 0x80, 0xEE, 0x90, 0x80, 0x80, 0xDB, 0xA3, 0x80, 0x80, 0xC4, 0xBA, 0x80, 0x80, 0xAB, 0xD3, 0x80, 0x80, 0x8E, 0xF0, 0x80,
		0x80, 0x80, 0xF0, 0x8E, 0x80, 0x80, 0xD3, 0xAB, 0x80, 0x80, 0xBA, 0xC4, 0x80, 0x80, 0xA3, 0xDB, 0x80, 0x80, 0x90, 0xEE, 0x80, 0x80, 0x80, 0xFF, 0x73, 0x80, 0x80, 0xF1, 0x68, 0x80, 0x80, 0xE6,
		0xA7, 0xD7, 0x80, 0x80, 0x9D, 0xE1, 0x80, 0x80, 0x90, 0xEE, 0x80, 0x80, 0x80, 0xFF, 0x80, 0x80, 0x80, 0xEA, 0x94, 0x80, 0x80, 0xD1, 0xAD, 0x80, 0x80, 0xB4, 0xCA, 0x80, 0x80, 0x91, 0xED, 0x80,
		0x80, 0x80, 0xED, 0x91, 0x80, 0x80, 0xCA, 0xB4, 0x80, 0x80, 0xAD, 0xD1, 0x80, 0x80, 0x94, 0xEA, 0x80, 0x80, 0x80, 0xFF, 0x70, 0x80, 0x80, 0xEE, 0x63, 0x80, 0x80, 0xE1, 0x59, 0x80, 0x80, 0xD7,
		0xB8, 0xC6, 0x80, 0x80, 0xAF, 0xCF, 0x80, 0x80, 0xA3, 0xDB, 0x80, 0x80, 0x94, 0xEA, 0x80, 0x80, 0x80, 0xFF, 0x80, 0x80, 0x80, 0xE4, 0x9A, 0x80, 0x80, 0xC1, 0xBD, 0x80, 0x80, 0x96, 0xE8, 0x80,
		0x80, 0x80, 0xE8, 0x96, 0x80, 0x80, 0xBD, 0xC1, 0x80, 0x80, 0x9A, 0xE4, 0x80, 0x80, 0x80, 0xFF, 0x6C, 0x80, 0x80, 0xEA, 0x5D, 0x80, 0x80, 0xDB, 0x51, 0x80, 0x80, 0xCF, 0x48, 0x80, 0x80, 0xC6,
		0xCA, 0xB4, 0x80, 0x80, 0xC3, 0xBB, 0x80, 0x80, 0xBA, 0xC4, 0x80, 0x80, 0xAD, 0xD1, 0x80, 0x80, 0x9A, 0xE4, 0x80, 0x80, 0x80, 0xFF, 0x80, 0x80, 0x80, 0xD7, 0xA7, 0x80, 0x80, 0x9F, 0xDF, 0x80,
		0x80, 0x80, 0xDF, 0x9F, 0x80, 0x80, 0xA7, 0xD7, 0x80, 0x80, 0x80, 0xFF, 0x66, 0x80, 0x80, 0xE4, 0x53, 0x80, 0x80, 0xD1, 0x46, 0x80, 0x80, 0xC4, 0x3D, 0x80, 0x80, 0xBB, 0x36, 0x80, 0x80, 0xB4,
		0xDF, 0x9F, 0x80, 0x80, 0xDA, 0xA4, 0x80, 0x80, 0xD3, 0xAB, 0x80, 0x80, 0xCA, 0xB4, 0x80, 0x80, 0xBD, 0xC1, 0x80, 0x80, 0xA7, 0xD7, 0x80, 0x80, 0x80, 0xFF, 0x80, 0x80, 0x80, 0xB4, 0xCA, 0x80,
		0x80, 0x80, 0xCA, 0xB4, 0x80, 0x80, 0x80, 0xFF, 0x59, 0x80, 0x80, 0xD7, 0x43, 0x80, 0x80, 0xC1, 0x36, 0x80, 0x80, 0xB4, 0x2D, 0x80, 0x80, 0xAB, 0x26, 0x80, 0x80, 0xA4, 0x21, 0x80, 0x80, 0x9F,
		0xF4, 0x8A, 0x80, 0x80, 0xF2, 0x8C, 0x80, 0x80, 0xF0, 0x8E, 0x80, 0x80, 0xED, 0x91, 0x80, 0x80, 0xE8, 0x96, 0x80, 0x80, 0xDF, 0x9F, 0x80, 0x80, 0xCA, 0xB4, 0x80, 0x80, 0x80, 0xFF, 0x80, 0x80,
		0x80, 0x80, 0x80, 0xFF, 0x36, 0x80, 0x80, 0xB4, 0x21, 0x80, 0x80, 0x9F, 0x18, 0x80, 0x80, 0x96, 0x13, 0x80, 0x80, 0x91, 0x10, 0x80, 0x80, 0x8E, 0x0E, 0x80, 0x80, 0x8C, 0x0C, 0x80, 0x80, 0x8A,
		0xF4, 0x80, 0x80, 0x76, 0xF2, 0x80, 0x80, 0x74, 0xF0, 0x80, 0x80, 0x72, 0xED, 0x80, 0x80, 0x6F, 0xE8, 0x80, 0x80, 0x6A, 0xDF, 0x80, 0x80, 0x61, 0xCA, 0x80, 0x80, 0x4C, 0x80, 0x80, 0x80, 0x01,
		0x80, 0x01, 0x80, 0x80, 0x36, 0x4C, 0x80, 0x80, 0x21, 0x61, 0x80, 0x80, 0x18, 0x6A, 0x80, 0x80, 0x13, 0x6F, 0x80, 0x80, 0x10, 0x72, 0x80, 0x80, 0x0E, 0x74, 0x80, 0x80, 0x0C, 0x76, 0x80, 0x80,
		0xDF, 0x80, 0x80, 0x61, 0xDA, 0x80, 0x80, 0x5C, 0xD3, 0x80, 0x80, 0x55, 0xCA, 0x80, 0x80, 0x4C, 0xBD, 0x80, 0x80, 0x3F, 0xA7, 0x80, 0x80, 0x29, 0x80, 0x80, 0x80, 0x01, 0x80, 0x80, 0x36, 0x4C,
		0x80, 0x4C, 0x36, 0x80, 0x80, 0x01, 0x80, 0x80, 0x59, 0x29, 0x80, 0x80, 0x43, 0x3F, 0x80, 0x80, 0x36, 0x4C, 0x80, 0x80, 0x2D, 0x55, 0x80, 0x80, 0x26, 0x5C, 0x80, 0x80, 0x21, 0x61, 0x80, 0x80,
		0xCA, 0x80, 0x80, 0x4C, 0xC3, 0x80, 0x80, 0x45, 0xBA, 0x80, 0x80, 0x3C, 0xAD, 0x80, 0x80, 0x2F, 0x9A, 0x80, 0x80, 0x1C, 0x80, 0x80, 0x80, 0x01, 0x80, 0x80, 0x59, 0x29, 0x80, 0x80, 0x21, 0x61,
		0x80, 0x61, 0x21, 0x80, 0x80, 0x29, 0x59, 0x80, 0x80, 0x01, 0x80, 0x80, 0x66, 0x1C, 0x80, 0x80, 0x53, 0x2F, 0x80, 0x80, 0x46, 0x3C, 0x80, 0x80, 0x3D, 0x45, 0x80, 0x80, 0x36, 0x4C, 0x80, 0x80,
		0xB8, 0x80, 0x80, 0x3A, 0xAF, 0x80, 0x80, 0x31, 0xA3, 0x80, 0x80, 0x25, 0x94, 0x80, 0x80, 0x16, 0x80, 0x80, 0x80, 0x01, 0x80, 0x80, 0x66, 0x1C, 0x80, 0x80, 0x43, 0x3F, 0x80, 0x80, 0x18, 0x6A,
		0x80, 0x6A, 0x18, 0x80, 0x80, 0x3F, 0x43, 0x80, 0x80, 0x1C, 0x66, 0x80, 0x80, 0x01, 0x80, 0x80, 0x6C, 0x16, 0x80, 0x80, 0x5D, 0x25, 0x80, 0x80, 0x51, 0x31, 0x80, 0x80, 0x48, 0x3A, 0x80, 0x80,
		0xA7, 0x80, 0x80, 0x29, 0x9D, 0x80, 0x80, 0x1F, 0x90, 0x80, 0x80, 0x12, 0x80, 0x80, 0x80, 0x01, 0x80, 0x80, 0x6C, 0x16, 0x80, 0x80, 0x53, 0x2F, 0x80, 0x80, 0x36, 0x4C, 0x80, 0x80, 0x13, 0x6F,
		0x80, 0x6F, 0x13, 0x80, 0x80, 0x4C, 0x36, 0x80, 0x80, 0x2F, 0x53, 0x80, 0x80, 0x16, 0x6C, 0x80, 0x80, 0x01, 0x80, 0x80, 0x70, 0x12, 0x80, 0x80, 0x63, 0x1F, 0x80, 0x80, 0x59, 0x29, 0x80, 0x80,
		0x98, 0x80, 0x80, 0x1A, 0x8D, 0x80, 0x80, 0x0F, 0x80, 0x80, 0x80, 0x01, 0x80, 0x80, 0x70, 0x12, 0x80, 0x80, 0x5D, 0x25, 0x80, 0x80, 0x46, 0x3C, 0x80, 0x80, 0x2D, 0x55, 0x80, 0x80, 0x10, 0x72,
		0x80, 0x72, 0x10, 0x80, 0x80, 0x55, 0x2D, 0x80, 0x80, 0x3C, 0x46, 0x80, 0x80, 0x25, 0x5D, 0x80, 0x80, 0x12, 0x70, 0x80, 0x80, 0x01, 0x80, 0x80, 0x73, 0x0F, 0x80, 0x80, 0x68, 0x1A, 0x80, 0x80,
		0x8B, 0x80, 0x80, 0x0D, 0x80, 0x80, 0x80, 0x01, 0x80, 0x80, 0x73, 0x0F, 0x80, 0x80, 0x63, 0x1F, 0x80, 0x80, 0x51, 0x31, 0x80, 0x80, 0x3D, 0x45, 0x80, 0x80, 0x26, 0x5C, 0x80, 0x80, 0x0E, 0x74,
		0x80, 0x74, 0x0E, 0x80, 0x80, 0x5C, 0x26, 0x80, 0x80, 0x45, 0x3D, 0x80, 0x80, 0x31, 0x51, 0x80, 0x80, 0x1F, 0x63, 0x80, 0x80, 0x0F, 0x73, 0x80, 0x80, 0x01, 0x80, 0x80, 0x75, 0x0D, 0x80, 0x80,
		0x80, 0x80, 0x80, 0x01, 0x80, 0x80, 0x75, 0x0D, 0x80, 0x80, 0x68, 0x1A, 0x80, 0x80, 0x59, 0x29, 0x80, 0x80, 0x48, 0x3A, 0x80, 0x80, 0x36, 0x4C, 0x80, 0x80, 0x21, 0x61, 0x80, 0x80, 0x0C, 0x76,
		0x80, 0x76, 0x0C, 0x80, 0x80, 0x61, 0x21, 0x80, 0x80, 0x4C, 0x36, 0x80, 0x80, 0x3A, 0x48, 0x80, 0x80, 0x29, 0x59, 0x80, 0x80, 0x1A, 0x68, 0x80, 0x80, 0x0D, 0x75, 0x80, 0x80, 0x01, 0x80, 0x80
	};
}


Texture *HorizonProcess::horizonTexture = nullptr;


HorizonTextureAttribute::HorizonTextureAttribute() : TextureAttribute(kAttributeHorizonTexture)
{
	horizonFlags = 0;
}

HorizonTextureAttribute::HorizonTextureAttribute(const char *name) : TextureAttribute(kAttributeHorizonTexture, name)
{
	horizonFlags = 0;
}

HorizonTextureAttribute::HorizonTextureAttribute(Texture *texture) : TextureAttribute(kAttributeHorizonTexture, texture)
{
	horizonFlags = 0;
}

HorizonTextureAttribute::HorizonTextureAttribute(const TextureHeader *header, const void *image) : TextureAttribute(kAttributeHorizonTexture, header, image)
{
	horizonFlags = 0;
}

HorizonTextureAttribute::HorizonTextureAttribute(const HorizonTextureAttribute& horizonTextureAttribute) : TextureAttribute(horizonTextureAttribute)
{
	horizonFlags = horizonTextureAttribute.horizonFlags;
}

HorizonTextureAttribute::~HorizonTextureAttribute()
{
}

Attribute *HorizonTextureAttribute::Replicate(void) const
{
	return (new HorizonTextureAttribute(*this));
}

void HorizonTextureAttribute::Pack(Packer& data, unsigned_int32 packFlags) const
{
	TextureAttribute::Pack(data, packFlags);

	if (horizonFlags != 0)
	{
		data << ChunkHeader('FLAG', 4);
		data << horizonFlags;
	}

	data << TerminatorChunk;
}

void HorizonTextureAttribute::Unpack(Unpacker& data, unsigned_int32 unpackFlags)
{
	TextureAttribute::Unpack(data, unpackFlags);
	UnpackChunkList<HorizonTextureAttribute>(data, unpackFlags);
}

bool HorizonTextureAttribute::UnpackChunk(const ChunkHeader *chunkHeader, Unpacker& data, unsigned_int32 unpackFlags)
{
	switch (chunkHeader->chunkType)
	{
		case 'FLAG':

			data >> horizonFlags;
			return (true);
	}

	return (false);
}

void *HorizonTextureAttribute::BeginSettingsUnpack(void)
{
	horizonFlags = 0;
	return (TextureAttribute::BeginSettingsUnpack());
}

bool HorizonTextureAttribute::operator ==(const Attribute& attribute) const
{
	if (TextureAttribute::operator ==(attribute))
	{
		const HorizonTextureAttribute *horizonTextureAttribute = static_cast<const HorizonTextureAttribute *>(&attribute);
		if (horizonTextureAttribute->horizonFlags == horizonFlags)
		{
			return (true);
		}
	}

	return (false);
}


HorizonProcess::HorizonProcess() : TextureMapProcess(kProcessHorizon)
{
	horizonFlags = 0;
}

HorizonProcess::HorizonProcess(const HorizonProcess& horizonProcess) : TextureMapProcess(horizonProcess)
{
	horizonFlags = horizonProcess.horizonFlags;
}

HorizonProcess::~HorizonProcess()
{
}

Process *HorizonProcess::Replicate(void) const
{
	return (new HorizonProcess(*this));
}

void HorizonProcess::Initialize(void)
{
	horizonTexture = Texture::Get(&horizonTextureHeader, horizonTextureImage);
}

void HorizonProcess::Terminate(void)
{
	horizonTexture->Release();
}

void HorizonProcess::Pack(Packer& data, unsigned_int32 packFlags) const
{
	TextureMapProcess::Pack(data, packFlags);

	data << horizonFlags;
}

void HorizonProcess::Unpack(Unpacker& data, unsigned_int32 unpackFlags)
{
	TextureMapProcess::Unpack(data, unpackFlags);

	data >> horizonFlags;

	#if C4LEGACY

		if (data.GetVersion() <= 65)
		{
			ResourceName	name;

			data >> name;

			name = GetTextureName();
			int32 length = name.Length();

			if ((length > 8) && (Text::CompareText(&name[length - 8], "-nrml", 5)))
			{
				name[length - 7] = 'h';
				name[length - 6] = 'r';
				name[length - 5] = 'z';
				name[length - 4] = 'n';
				name[length - 3] = 0;
			}
			else
			{
				name[length - 1] = 0;
			}

			SetTexture(name);
		}

	#endif
}

int32 HorizonProcess::GetSettingCount(void) const
{
	return (TextureMapProcess::GetSettingCount() + 3);
}

Setting *HorizonProcess::GetSetting(int32 index) const
{
	int32 count = TextureMapProcess::GetSettingCount();
	if (index < count)
	{
		return (TextureMapProcess::GetSetting(index));
	}

	const StringTable *table = TheInterfaceMgr->GetStringTable();

	if (index == count)
	{
		const char *title = table->GetString(StringID('PROC', kProcessHorizon, 'XINF'));
		return (new BooleanSetting('XINF', ((horizonFlags & kHorizonExcludeInfiniteLight) != 0), title));
	}

	if (index == count + 1)
	{
		const char *title = table->GetString(StringID('PROC', kProcessHorizon, 'XPNT'));
		return (new BooleanSetting('XPNT', ((horizonFlags & kHorizonExcludePointLight) != 0), title));
	}

	if (index == count + 2)
	{
		const char *title = table->GetString(StringID('PROC', kProcessHorizon, 'DETL'));
		return (new BooleanSetting('DETL', ((GetProcessFlags() & kProcessHighDetail) != 0), title));
	}

	return (nullptr);
}

void HorizonProcess::SetSetting(const Setting *setting)
{
	Type identifier = setting->GetSettingIdentifier();

	if (identifier == 'XINF')
	{
		if (static_cast<const BooleanSetting *>(setting)->GetBooleanValue())
		{
			horizonFlags |= kHorizonExcludeInfiniteLight;
		}
		else
		{
			horizonFlags &= ~kHorizonExcludeInfiniteLight;
		}
	}
	else if (identifier == 'XPNT')
	{
		if (static_cast<const BooleanSetting *>(setting)->GetBooleanValue())
		{
			horizonFlags |= kHorizonExcludePointLight;
		}
		else
		{
			horizonFlags &= ~kHorizonExcludePointLight;
		}
	}
	else if (identifier == 'DETL')
	{
		if (static_cast<const BooleanSetting *>(setting)->GetBooleanValue())
		{
			SetProcessFlags(GetProcessFlags() | kProcessHighDetail);
		}
		else
		{
			SetProcessFlags(GetProcessFlags() & ~kProcessHighDetail);
		}
	}
	else
	{
		TextureMapProcess::SetSetting(setting);
	}
}

bool HorizonProcess::operator ==(const Process& process) const
{
	if (TextureMapProcess::operator ==(process))
	{
		const HorizonProcess& horizonProcess = static_cast<const HorizonProcess&>(process);
		return (horizonFlags == horizonProcess.horizonFlags);
	}

	return (false);
}

int32 HorizonProcess::GetPortCount(void) const
{
	return (2);
}

unsigned_int32 HorizonProcess::GetPortFlags(int32 index) const
{
	return (0);
}

const char *HorizonProcess::GetPortName(int32 index) const
{
	if (index == 0)
	{
		return (TextureMapProcess::GetPortName(0));
	}

	return ("RGB");
}

bool HorizonProcess::ProcessEnabled(const ShaderCompileData *compileData) const
{
	if (TheGraphicsMgr->GetRenderOptionFlags() & kRenderOptionHorizonMapping)
	{
		if ((compileData->detailLevel == 0) || (!(GetProcessFlags() & kProcessHighDetail)))
		{
			unsigned_int32 flags = horizonFlags;
			ShaderType type = compileData->shaderType;

			if (type <= kShaderInfiniteLight)
			{
				return ((flags & kHorizonExcludeInfiniteLight) == 0);
			}

			return ((flags & kHorizonExcludePointLight) == 0);
		}
	}

	return (false);
}

int32 HorizonProcess::GenerateProcessSignature(const ShaderCompileData *compileData, unsigned_int32 *signature) const
{
	int32 count = TextureMapProcess::GenerateProcessSignature(compileData, signature);
	signature[count] = ProcessEnabled(compileData);
	return (count + 1);
}

int32 HorizonProcess::GenerateDerivedInterpolantTypes(const ShaderCompileData *compileData, ProcessType *type) const
{
	if (ProcessEnabled(compileData))
	{
		type[0] = kProcessTangentLightDirection;
		return (1);
	}

	return (0);
}

void HorizonProcess::GenerateProcessData(const ShaderCompileData *compileData, ProcessData *data) const
{
	if (ProcessEnabled(compileData))
	{
		data->registerCount = 1;
		data->temporaryCount = 4;

		data->textureCount = 2;
		data->textureObject[0] = GetTexture();
		data->textureObject[1] = horizonTexture;
	}
	else
	{
		data->passthruPort = 1;
	}

	data->outputSize = 3;
	data->inputSize[0] = 2;
	data->inputSize[1] = 3;
}

int32 HorizonProcess::GenerateOutputIdentifier(const ShaderCompileData *compileData, const ShaderAllocationData *allocData, SwizzleData *swizzleData, char *name) const
{
	if (ProcessEnabled(compileData))
	{
		return (TextureMapProcess::GenerateOutputIdentifier(compileData, allocData, swizzleData, name));
	}

	return (GetPortRoute(1)->GenerateOutputIdentifier(compileData, allocData, swizzleData, name));
}

int32 HorizonProcess::GenerateShaderCode(const ShaderCompileData *compileData, const char **shaderCode) const
{
	if (ProcessEnabled(compileData))
	{
		#if C4OPENGL

			static const char code[] =
			{
				"temp = texture(%IMG1, ldir);\n"
				"tmp1 = clamp(temp * 2.0 - 1.0, 0.0, 1.0);\n"
				"tmp2 = clamp(temp * -2.0 + 1.0, 0.0, 1.0);\n"
				"tmp3 = %TRG0(%IMG0, vec3(%0, 0.0));\n"
				"tmp4 = %TRG0(%IMG0, vec3(%0, 1.0));\n"
				"temp = vec4(dot(tmp1, tmp3), dot(tmp2, tmp4), ldir.z, 1.0);\n"
				"# = %1 * clamp(dot(temp, vec4(-8.0, -8.0, 8.0, 1.0)), 0.0, 1.0);\n"
			};

		#elif C4PSSL //[ PS4

			// -- PS4 code hidden --

		#elif C4CG //[ PS3

			// -- PS3 code hidden --

		#endif //]

		shaderCode[0] = code;
		return (1);
	}

	return (0);
}

// ZYUQURM
